name: Docker

on:  
  push:
    branches: 
      - main       
      - develop    
      - 'feature/*'
      - 'release/*'
      - 'hotfix/*'
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: 
      - main
      - develop

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  MAJOR: 3
  MINOR: 0
  TAG_PREFIX: it-works-on-my-machine

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: npm install
        run: npm install

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      image_ref: ${{ steps.version.outputs.image_ref }}

    steps:
      - name: Setup Snyk CLI
        uses: snyk/actions/setup@main
        
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: 'v2.2.4'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Docker image version tag
        id: version
        run: |
          VERSION="${{ env.MAJOR }}.${{ env.MINOR }}-${{ env.TAG_PREFIX }}-${GITHUB_RUN_NUMBER}"
          IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "image_ref=$IMAGE_REF" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "IMAGE_REF=$IMAGE_REF" >> $GITHUB_ENV

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: ${{ env.VERSION }}
      
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.IMAGE_REF }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ env.IMAGE_REF }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      - name: Snyk Container Scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk container test ${{ env.IMAGE_REF }} --severity-threshold=high || true

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Log into GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Pull image
        run: docker pull ${{ needs.build.outputs.image_ref }}
  
      - name: Run container
        run: docker run -d -p 3000:3000 ${{ needs.build.outputs.image_ref }}
  
      - name: Test app
        run: |
          sleep 5
          curl -s http://localhost:3000/health | grep "Still working" && echo "PASS ✅" || echo "FAIL ❌"
